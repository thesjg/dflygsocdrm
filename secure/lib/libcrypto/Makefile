# $FreeBSD: src/secure/lib/libcrypto/Makefile,v 1.15.2.14 2003/02/14 22:38:14 nectar Exp $
# $DragonFly: src/secure/lib/libcrypto/Makefile,v 1.11 2008/09/06 20:42:53 pavalos Exp $

LIB=		crypto
SHLIB_MAJOR=	5
WARNS?=		0

NOLINT=		true

SUBDIR=	engines

.if ${MACHINE_ARCH} == "x86_64"
LDFLAGS+=-Wl,-Bsymbolic
.endif

.if exists(Makefile.man)
.include "Makefile.man"
.endif

.include "Makefile.inc"

# base sources
SRCS=	cryptlib.c mem.c mem_dbg.c cversion.c ex_data.c cpt_err.c ebcdic.c \
	uid.c o_time.c o_dir.c o_fips.c o_init.c fips_ers.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	x86cpuid.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	x86_64cpuid.s
.endif
INCS=	../e_os2.h
INCS+=	crypto.h opensslv.h opensslconf.h ebcdic.h symhacks.h ossl_typ.h
SRCS+=	buildinf.h
INCSDIR=	${INCLUDEDIR}/openssl

CLEANFILES+=	buildinf.h opensslconf.h

buildinf.h:
	( echo "#ifndef MK1MF_BUILD"; \
	echo "  /* auto-generated by crypto/Makefile.ssl for crypto/cversion.c */"; \
	echo "  #define CFLAGS \"$(CC)\""; \
	echo "  #define PLATFORM \"`uname -s`-`uname -m`\""; \
	echo "  #define DATE \"`LC_ALL=C date`\""; \
	echo "#endif" ) > ${.TARGET}

opensslconf.h: opensslconf-${MACHINE_ARCH}.h
.if defined(WANT_IDEA)
	sed '/^# define OPENSSL_NO_IDEA$$/d;/^#  define NO_IDEA$$/d' ${.ALLSRC} > ${.TARGET}
.else
	cp ${.ALLSRC} ${.TARGET}
.endif


# aes
SRCS+=	aes_misc.c aes_ecb.c aes_cfb.c aes_ofb.c aes_ctr.c aes_ige.c aes_wrap.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	aes-586.s vpaes-x86.s aesni-x86.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	aes-x86_64.s vpaes-x86_64.s bsaes-x86_64.s aesni-x86_64.s aesni-sha1-x86_64.s
.endif
INCS+=	aes.h

# asn1
SRCS+=	a_object.c a_bitstr.c a_utctm.c a_gentm.c a_time.c a_int.c a_octet.c \
	a_print.c a_type.c a_set.c a_dup.c a_d2i_fp.c a_i2d_fp.c \
	a_enum.c a_utf8.c a_sign.c a_digest.c a_verify.c a_mbstr.c a_strex.c \
	x_algor.c x_val.c x_pubkey.c x_sig.c x_req.c x_attrib.c x_bignum.c \
	x_long.c x_name.c x_x509.c x_x509a.c x_crl.c x_info.c x_spki.c nsseq.c \
	x_nx509.c d2i_pu.c d2i_pr.c i2d_pu.c i2d_pr.c \
	t_req.c t_x509.c t_x509a.c t_crl.c t_pkey.c t_spki.c t_bitst.c \
	tasn_new.c tasn_fre.c tasn_enc.c tasn_dec.c tasn_utl.c tasn_typ.c \
	tasn_prn.c ameth_lib.c \
	f_int.c f_string.c n_pkey.c \
	f_enum.c x_pkey.c a_bool.c x_exten.c bio_asn1.c bio_ndef.c asn_mime.c \
	asn1_gen.c asn1_par.c asn1_lib.c asn1_err.c a_bytes.c a_strnid.c \
	evp_asn1.c asn_pack.c p5_pbe.c p5_pbev2.c p8_pkey.c asn_moid.c
INCS+=	asn1.h asn1_mac.h asn1t.h

# bf
SRCS+=	bf_skey.c bf_ecb.c bf_cfb64.c bf_ofb64.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	bf-586.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	bf_enc.c
.endif
INCS+=	blowfish.h

# bio
SRCS+=	bio_lib.c bio_cb.c bio_err.c \
	bss_mem.c bss_null.c bss_fd.c \
	bss_file.c bss_sock.c bss_conn.c \
	bf_null.c bf_buff.c b_print.c b_dump.c \
	b_sock.c bss_acpt.c bf_nbio.c bss_log.c bss_bio.c \
	bss_dgram.c
INCS+=	bio.h

# bn
SRCS+=	bn_add.c bn_div.c bn_exp.c bn_lib.c bn_ctx.c bn_mul.c bn_mod.c \
	bn_print.c bn_rand.c bn_shift.c bn_word.c bn_blind.c \
	bn_kron.c bn_sqrt.c bn_gcd.c bn_prime.c bn_err.c bn_sqr.c \
	bn_recp.c bn_mont.c bn_mpi.c bn_exp2.c bn_gf2m.c bn_nist.c \
	bn_depr.c bn_const.c bn_x931p.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	bn-586.s co-586.s x86-mont.s x86-gf2m.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	x86_64-gcc.c x86_64-mont.s x86_64-mont5.s x86_64-gf2m.s modexp512-x86_64.s
.endif
INCS+=	bn.h

# buffer
SRCS+=	buffer.c buf_str.c buf_err.c
INCS+=	buffer.h

# camellia
SRCS+=	cmll_ecb.c cmll_ofb.c cmll_cfb.c cmll_ctr.c cmll_utl.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	cmll-x86.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	cmll-x86_64.s cmll_misc.c
.endif
INCS+=	camellia.h

# cast
SRCS+=	c_skey.c c_ecb.c c_enc.c c_cfb64.c c_ofb64.c
INCS+=	cast.h

# cmac
SRCS+=	cmac.c cm_ameth.c cm_pmeth.c
INCS+=	cmac.h

# cms
SRCS+=	cms_lib.c cms_asn1.c cms_att.c cms_io.c cms_smime.c cms_err.c \
	cms_sd.c cms_dd.c cms_cd.c cms_env.c cms_enc.c cms_ess.c \
	cms_pwri.c
INCS+=	cms.h

# comp
SRCS+=	comp_lib.c comp_err.c \
	c_rle.c c_zlib.c
INCS+=	comp.h

# conf
SRCS+=	conf_err.c conf_lib.c conf_api.c conf_def.c conf_mod.c \
	conf_mall.c conf_sap.c
INCS+=	conf.h conf_api.h

# des
SRCS+=	set_key.c  ecb_enc.c  cbc_enc.c \
	ecb3_enc.c cfb64enc.c cfb64ede.c cfb_enc.c  ofb64ede.c \
	enc_read.c enc_writ.c ofb64enc.c \
	ofb_enc.c  str2key.c  pcbc_enc.c qud_cksm.c rand_key.c \
	fcrypt.c xcbc_enc.c rpc_enc.c  cbc_cksm.c \
	ede_cbcm_enc.c des_old.c des_old2.c read2pwd.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	des-586.s crypt586.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	des_enc.c fcrypt_b.c
.endif
INCS+=	des.h des_old.h

# dh
SRCS+=	dh_asn1.c dh_gen.c dh_key.c dh_lib.c dh_check.c dh_err.c dh_depr.c \
	dh_ameth.c dh_pmeth.c dh_prn.c
INCS+=	dh.h

# dsa
SRCS+=	dsa_gen.c dsa_key.c dsa_lib.c dsa_asn1.c dsa_vrf.c dsa_sign.c \
	dsa_err.c dsa_ossl.c dsa_depr.c dsa_ameth.c dsa_pmeth.c dsa_prn.c
INCS+=	dsa.h

# dso
SRCS+=	dso_dl.c dso_dlfcn.c dso_err.c dso_lib.c dso_null.c dso_openssl.c
INCS+=	dso.h

# ec
SRCS+=	ec_lib.c ecp_smpl.c ecp_mont.c ecp_nist.c ec_cvt.c ec_mult.c \
	ec_err.c ec_curve.c ec_check.c ec_print.c ec_asn1.c ec_key.c \
	ec2_smpl.c ec2_mult.c ec_ameth.c ec_pmeth.c eck_prn.c \
	ecp_nistp224.c ecp_nistp256.c ecp_nistp521.c ecp_nistputil.c \
	ecp_oct.c ec2_oct.c ec_oct.c
INCS+=	ec.h

# ecdh
SRCS+=	ech_lib.c ech_ossl.c ech_key.c ech_err.c
INCS+=	ecdh.h

# ecdsa
SRCS+=	ecs_lib.c ecs_asn1.c ecs_ossl.c ecs_sign.c ecs_vrf.c ecs_err.c
INCS+=	ecdsa.h

# engine
CFLAGS+=-DHAVE_CRYPTODEV
SRCS+=	eng_err.c eng_lib.c eng_list.c eng_init.c eng_ctrl.c \
	eng_table.c eng_pkey.c eng_fat.c eng_all.c \
	tb_rsa.c tb_dsa.c tb_ecdsa.c tb_dh.c tb_ecdh.c tb_rand.c tb_store.c \
	tb_cipher.c tb_digest.c tb_pkmeth.c tb_asnmth.c \
	eng_openssl.c eng_cnf.c eng_dyn.c eng_cryptodev.c \
	eng_rsax.c eng_rdrand.c
INCS+=	engine.h

# err
SRCS+=	err.c err_all.c err_prn.c
INCS+=	err.h

# evp
SRCS+=	encode.c digest.c evp_enc.c evp_key.c evp_acnf.c \
	e_des.c e_bf.c e_idea.c e_des3.c e_camellia.c\
	e_rc4.c e_aes.c names.c e_seed.c \
	e_xcbc_d.c e_rc2.c e_cast.c e_rc5.c \
	m_null.c m_md2.c m_md4.c m_md5.c m_sha.c m_sha1.c m_wp.c \
	m_dss.c m_dss1.c m_mdc2.c m_ripemd.c m_ecdsa.c\
	p_open.c p_seal.c p_sign.c p_verify.c p_lib.c p_enc.c p_dec.c \
	bio_md.c bio_b64.c bio_enc.c evp_err.c e_null.c \
	c_all.c c_allc.c c_alld.c evp_lib.c bio_ok.c \
	evp_pkey.c evp_pbe.c p5_crpt.c p5_crpt2.c \
	e_old.c pmeth_lib.c pmeth_fn.c pmeth_gn.c m_sigver.c evp_fips.c \
	e_aes_cbc_hmac_sha1.c e_rc4_hmac_md5.c
INCS+=	evp.h

# hmac
SRCS+=	hmac.c hm_ameth.c hm_pmeth.c
INCS+=	hmac.h

# idea
.if defined(WANT_IDEA)
SRCS+=	i_cbc.c i_cfb64.c i_ofb64.c i_ecb.c i_skey.c
INCS+=	idea.h
_ideapath=	${LCRYPTO_SRC}/crypto/idea
.endif

# krb5
SRCS+=	krb5_asn.c
INCS+=	krb5_asn.h

# lhash
SRCS+=	lhash.c lh_stats.c
INCS+=	lhash.h

# md2
#SRCS+=	md2_dgst.c md2_one.c
#INCS+=	md2.h

# md4
SRCS+=	md4_dgst.c md4_one.c
INCS+=	md4.h

# md5
SRCS+=	md5_dgst.c md5_one.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	md5-586.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	md5-x86_64.s
.endif
INCS+=	md5.h

# mdc2
SRCS+=	mdc2dgst.c mdc2_one.c
INCS+=	mdc2.h

# modes
SRCS+=	cbc128.c ctr128.c cts128.c cfb128.c ofb128.c gcm128.c \
	ccm128.c xts128.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	ghash-x86.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	ghash-x86_64.s
.endif
INCS+=	modes.h

# objects
SRCS+=	o_names.c obj_dat.c obj_lib.c obj_err.c obj_xref.c
INCS+=	objects.h obj_mac.h

# ocsp
SRCS+=	ocsp_asn.c ocsp_ext.c ocsp_ht.c ocsp_lib.c ocsp_cl.c \
	ocsp_srv.c ocsp_prn.c ocsp_vfy.c ocsp_err.c
INCS+=	ocsp.h

# pem
SRCS+=	pem_sign.c pem_seal.c pem_info.c pem_lib.c pem_all.c pem_err.c \
	pem_x509.c pem_xaux.c pem_oth.c pem_pk8.c pem_pkey.c pvkfmt.c
INCS+=	pem.h pem2.h

# pkcs12
SRCS+=	p12_add.c p12_asn.c p12_attr.c p12_crpt.c p12_crt.c p12_decr.c \
	p12_init.c p12_key.c p12_kiss.c p12_mutl.c \
	p12_utl.c p12_npas.c pk12err.c p12_p8d.c p12_p8e.c
INCS+=	pkcs12.h

# pkcs7
SRCS+=	pk7_asn1.c pk7_lib.c pkcs7err.c pk7_doit.c pk7_smime.c pk7_attr.c \
	pk7_mime.c bio_pk7.c
INCS+=	pkcs7.h

# pqueue
SRCS+=	pqueue.c
INCS+=	pqueue.h

# rand
SRCS+=	md_rand.c randfile.c rand_lib.c rand_err.c rand_egd.c \
	rand_unix.c
INCS+=	rand.h

# rc2
SRCS+=	rc2_ecb.c rc2_skey.c rc2_cbc.c rc2cfb64.c rc2ofb64.c
INCS+=	rc2.h

# rc4
SRCS+=	rc4_utl.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	rc4-586.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	rc4-x86_64.s rc4-md5-x86_64.s
.endif
INCS+=	rc4.h

# rc5
# .. is patented, so don't compile by default
#SRCS+=	rc5_skey.c rc5_ecb.c rc5_enc.c rc5cfb64.c rc5ofb64.c
#INCS+=	rc5.h

# ripemd
SRCS+=	rmd_dgst.c rmd_one.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	rmd-586.s
.endif
INCS+=	ripemd.h

# rsa
SRCS+=	rsa_eay.c rsa_gen.c rsa_lib.c rsa_sign.c rsa_saos.c rsa_err.c \
	rsa_pk1.c rsa_ssl.c rsa_none.c rsa_oaep.c rsa_chk.c rsa_null.c \
	rsa_pss.c rsa_x931.c rsa_asn1.c rsa_depr.c rsa_ameth.c rsa_prn.c \
	rsa_pmeth.c rsa_crpt.c
INCS+=	rsa.h

# seed
SRCS+=	seed.c seed_ecb.c seed_cbc.c seed_cfb.c seed_ofb.c
INCS+=	seed.h

# sha
SRCS+=	sha_dgst.c sha1dgst.c sha_one.c sha1_one.c sha256.c sha512.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	sha1-586.s sha256-586.s sha512-586.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	sha1-x86_64.s sha256-x86_64.s sha512-x86_64.s
.endif
INCS+=	sha.h

# srp
SRCS+=	srp_lib.c srp_vfy.c
INCS+=	srp.h

# stack
SRCS+=	stack.c
INCS+=	stack.h safestack.h

# store
#SRCS+=	str_err.c str_lib.c str_meth.c str_mem.c
#INCS+=	store.h

# ts
SRCS+=	ts_err.c ts_req_utils.c ts_req_print.c ts_rsp_utils.c ts_rsp_print.c \
	ts_rsp_sign.c ts_rsp_verify.c ts_verify_ctx.c ts_lib.c ts_conf.c \
	ts_asn1.c
INCS+=	ts.h

# txt_db
SRCS+=	txt_db.c
INCS+=	txt_db.h

# ui
SRCS+=	ui_err.c ui_lib.c ui_openssl.c ui_util.c ui_compat.c
INCS+=	ui.h ui_compat.h

# whrlpool
SRCS+=	wp_dgst.c
.if ${MACHINE_ARCH} == "i386"
SRCS+=	wp_block.c wp-mmx.s
.elif ${MACHINE_ARCH} == "x86_64"
SRCS+=	wp-x86_64.s
.endif
INCS+=	whrlpool.h

# x509
SRCS+=	x509_def.c x509_d2.c x509_r2x.c x509_cmp.c \
	x509_obj.c x509_req.c x509spki.c x509_vfy.c \
	x509_set.c x509cset.c x509rset.c x509_err.c \
	x509name.c x509_v3.c x509_ext.c x509_att.c \
	x509type.c x509_lu.c x_all.c x509_txt.c \
	x509_trs.c by_file.c by_dir.c x509_vpm.c
INCS+=	x509.h x509_vfy.h

# x509v3
SRCS+=	v3_bcons.c v3_bitst.c v3_conf.c v3_extku.c v3_ia5.c v3_lib.c \
	v3_prn.c v3_utl.c v3err.c v3_genn.c v3_alt.c v3_skey.c v3_akey.c v3_pku.c \
	v3_int.c v3_enum.c v3_sxnet.c v3_cpols.c v3_crld.c v3_purp.c v3_info.c \
	v3_ocsp.c v3_akeya.c v3_pmaps.c v3_pcons.c v3_ncons.c v3_pcia.c v3_pci.c \
	pcy_cache.c pcy_node.c pcy_data.c pcy_map.c pcy_tree.c pcy_lib.c \
	v3_asid.c v3_addr.c
INCS+=	x509v3.h

.include <bsd.lib.mk>

# The crypto subdirs are listed in the order of the vendor's Makefile
# to aid future imports.
.PATH: \
	${.CURDIR}/asm \
	${LCRYPTO_SRC}/crypto \
	${LCRYPTO_SRC}/crypto/objects \
	${LCRYPTO_SRC}/crypto/md4 \
	${LCRYPTO_SRC}/crypto/md5 \
	${LCRYPTO_SRC}/crypto/sha \
	${LCRYPTO_SRC}/crypto/mdc2 \
	${LCRYPTO_SRC}/crypto/hmac \
	${LCRYPTO_SRC}/crypto/ripemd \
	${LCRYPTO_SRC}/crypto/whrlpool \
	${LCRYPTO_SRC}/crypto/des \
	${LCRYPTO_SRC}/crypto/aes \
	${LCRYPTO_SRC}/crypto/rc2 \
	${LCRYPTO_SRC}/crypto/rc4 \
	${LCRYPTO_SRC}/crypto/bf \
	${LCRYPTO_SRC}/crypto/cast \
	${LCRYPTO_SRC}/crypto/camellia \
	${LCRYPTO_SRC}/crypto/seed \
	${LCRYPTO_SRC}/crypto/modes \
	${LCRYPTO_SRC}/crypto/bn \
	${LCRYPTO_SRC}/crypto/bn/asm \
	${LCRYPTO_SRC}/crypto/ec \
	${LCRYPTO_SRC}/crypto/rsa \
	${LCRYPTO_SRC}/crypto/dsa \
	${LCRYPTO_SRC}/crypto/ecdsa \
	${LCRYPTO_SRC}/crypto/dh \
	${LCRYPTO_SRC}/crypto/ecdh \
	${LCRYPTO_SRC}/crypto/dso \
	${LCRYPTO_SRC}/crypto/engine \
	${LCRYPTO_SRC}/crypto/buffer \
	${LCRYPTO_SRC}/crypto/bio \
	${LCRYPTO_SRC}/crypto/stack \
	${LCRYPTO_SRC}/crypto/lhash \
	${LCRYPTO_SRC}/crypto/rand \
	${LCRYPTO_SRC}/crypto/err \
	${LCRYPTO_SRC}/crypto/evp \
	${LCRYPTO_SRC}/crypto/asn1 \
	${LCRYPTO_SRC}/crypto/pem \
	${LCRYPTO_SRC}/crypto/x509 \
	${LCRYPTO_SRC}/crypto/x509v3 \
	${LCRYPTO_SRC}/crypto/conf \
	${LCRYPTO_SRC}/crypto/txt_db \
	${LCRYPTO_SRC}/crypto/pkcs7 \
	${LCRYPTO_SRC}/crypto/pkcs12 \
	${LCRYPTO_SRC}/crypto/comp \
	${LCRYPTO_SRC}/crypto/ocsp \
	${LCRYPTO_SRC}/crypto/ui \
	${LCRYPTO_SRC}/crypto/krb5 \
	${LCRYPTO_SRC}/crypto/cms \
	${LCRYPTO_SRC}/crypto/pqueue \
	${LCRYPTO_SRC}/crypto/ts \
	${LCRYPTO_SRC}/crypto/srp \
	${LCRYPTO_SRC}/crypto/cmac \
	${_ideapath} \
	${LCRYPTO_SRC} \
	${.CURDIR}/man

.\" $FreeBSD: src/libexec/rtld-elf/rtld.1,v 1.18.2.7 2002/01/10 17:51:28 ru Exp $
.\"
.\" Copyright (c) 1995 Paul Kranenburg
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgment:
.\"      This product includes software developed by Paul Kranenburg.
.\" 3. The name of the author may not be used to endorse or promote products
.\"    derived from this software without specific prior written permission
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
.\" OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
.\" IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
.\" INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
.\" THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd February 21, 2011
.Dt RTLD 1
.Os
.Sh NAME
.Nm ld-elf.so.1 ,
.Nm ld-elf.so.2 ,
.Nm rtld ,
.Nm _rtld_functrace
.Nd run-time link-editor
.Sh SYNOPSIS
.Ft int
.Fn _rtld_functrace "const char *callerso" "const char *calleeso" "const char *calleefun" "void *stack"
.Sh DESCRIPTION
.Nm
is a self-contained shared object providing run-time
support for loading and link-editing shared objects into a process'
address space.
It is also commonly known as the dynamic linker.
It uses the data structures
contained within dynamically linked programs to determine which shared
libraries are needed and loads them using the
.Xr mmap 2
system call.
.Pp
After all shared libraries have been successfully loaded,
.Nm
proceeds to resolve external references from both the main program and
all objects loaded.
A mechanism is provided for initialization routines
to be called on a per-object basis, giving a shared object an opportunity
to perform any extra set-up before execution of the program proper begins.
This is useful for C++ libraries that contain static constructors.
.Pp
.Nm
itself is loaded by the kernel together with any dynamically-linked
program that is to be executed.
The kernel transfers control to the
dynamic linker.
After the dynamic linker has finished loading,
relocating, and initializing the program and its required shared
objects, it transfers control to the entry point of the program.
.Pp
To locate the required shared objects in the filesystem,
.Nm
may use a
.Dq hints
file prepared by the
.Xr ldconfig 8
utility.
.Pp
.Nm
recognizes a number of environment variables that can be used to modify
its behaviour as follows:
.Bl -tag -width ".Ev LD_LIBRARY_PATH"
.It Ev LD_LIBRARY_PATH
A colon separated list of directories, overriding the default search path
for shared libraries.
This is ignored for set-user-ID and set-group-ID programs.
.It Ev LD_PRELOAD
A list of shared libraries, separated by colons and/or white space,
to be linked in before any
other shared libraries.
If the directory is not specified then
the directories specified by
.Ev LD_LIBRARY_PATH
will be searched first
followed by the set of built-in standard directories.
This is ignored for set-user-ID and set-group-ID programs.
.It Ev LD_BIND_NOW
When set to a nonempty string, causes
.Nm
to relocate all external function calls before starting execution of the
program.
Normally, function calls are bound lazily, at the first call
of each function.
.Ev LD_BIND_NOW
increases the start-up time of a program, but it avoids run-time
surprises caused by unexpectedly undefined functions.
.It Ev LD_TRACE_LOADED_OBJECTS
When set to a nonempty string, causes
.Nm
to exit after loading the shared objects and printing a summary which includes
the absolute pathnames of all objects, to standard output.
.It Ev LD_TRACE_LOADED_OBJECTS_FMT1
.It Ev LD_TRACE_LOADED_OBJECTS_FMT2
When set, these variables are interpreted as format strings a la
.Xr printf 3
to customize the trace output and are used by
.Xr ldd 1 Ns 's
.Fl f
option and allows
.Xr ldd 1
to be operated as a filter more conveniently.
The following conversions can be used:
.Bl -tag -width 4n
.It Li %a
The main program's name
(also known as
.Dq __progname ) .
.It Li \&%A
The value of the environment variable
.Ev LD_TRACE_LOADED_OBJECTS_PROGNAME
.It Li %o
The library name.
.It Li %m
The library's major version number.
.It Li %p
The full pathname as determined by
.Nm rtld Ns 's
library search rules.
.It Li %x
The library's load address.
.El
.Pp
Additionally,
.Ql \en
and
.Ql \et
are recognized and have their usual meaning.
.El
.Pp
If a shared object preloaded by the
.Ev LD_PRELOAD
mechanism contains a public symbol
.Dq _rtld_functrace ,
.Nm
will transfer control to this function each time
it needs to resolve an unbound function symbol.
By returning a non-zero value,
.Fn _rtld_functrace
can advise the linker to keep tracing the specified
combination of caller shared object and called function;
returning 0 will prevent
.Fn _rtld_functrace
to be called for this combination again.
.Pp
When implementing a custom
.Fn _rtld_functrace
function, be aware of the possibility that
.Fn _rtld_functrace
might be called for functions called on its behalf,
or that multiple threads could enter
.Fn _rtld_functrace
at the same time.
.Sh DIFFERENCES BETWEEN .1 and .2
ABI changes have been made to support TLS allocation and initialization
and to give threading libraries a chance to complete initialization of the
TCB prior to the calling of the _init() functions for the dynamically loaded
libraries.
.Sh FILES
.Bl -tag -width indent
.It Pa /var/run/ld-elf.so.hints
.El
.Sh EXAMPLES
To set up an
.Fn _rtld_functrace
for printing out the functions as they are called, this code can be used:
.Bd -literal -offset indent
#include <string.h>

static int nl = 10;

int
_rtld_functrace(const char *callerso, const char *calleeso,
    const char *calleefun, void *stack)
{
	write(2, "calling ", 8);
	write(2, calleefun, strlen(calleefun));
	write(2, &nl, 1);
	return 1;
}
.Ed
.Pp
If put in a file named
.Pa ft.c
and compiled with
.Bd -literal -offset indent
$ cc -shared ft.c -o ft.so
.Ed
.Pp
setting
.Ev LD_PRELOAD
to the path of
.Pa ft.so
will activate it.
.Sh SEE ALSO
.Xr ld 1 ,
.Xr ldd 1 ,
.Xr elf 5 ,
.Xr ldconfig 8
